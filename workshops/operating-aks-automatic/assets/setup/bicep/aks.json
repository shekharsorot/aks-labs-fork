{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "15495512437515460279"
    }
  },
  "parameters": {
    "nameSuffix": {
      "type": "string",
      "metadata": {
        "description": "The basename of the resource."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4))]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Monitor/accounts",
      "apiVersion": "2023-04-03",
      "name": "[format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4))]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Dashboard/grafana",
      "apiVersion": "2023-09-01",
      "name": "[format('mygrafana{0}', take(uniqueString(parameters('nameSuffix')), 4))]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "grafanaIntegrations": {
          "azureMonitorWorkspaceIntegrations": [
            {
              "azureMonitorWorkspaceResourceId": "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2024-03-02-preview",
      "name": "myakscluster",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Automatic",
        "tier": "Standard"
      },
      "properties": {
        "agentPoolProfiles": [
          {
            "name": "systempool",
            "count": 3,
            "osType": "Linux",
            "mode": "System"
          }
        ],
        "addonProfiles": {
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
              "useAADAuth": "true"
            }
          }
        },
        "azureMonitorProfile": {
          "metrics": {
            "enabled": true,
            "kubeStateMetrics": {
              "metricLabelsAllowlist": "*",
              "metricAnnotationsAllowList": "*"
            }
          },
          "containerInsights": {
            "enabled": true,
            "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
          }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2022-11-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', 'myakscluster')]",
      "name": "appconfigurationkubernetesprovider",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "autoUpgradeMinorVersion": false,
        "extensionType": "Microsoft.AppConfiguration",
        "version": "2.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-11-01-preview",
      "name": "[format('mycontainerregistry{0}', take(uniqueString(parameters('nameSuffix')), 4))]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', format('mycontainerregistry{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
      "name": "[guid(subscription().id, resourceGroup().id, format('mycontainerregistry{0}', take(uniqueString(parameters('nameSuffix')), 4)), 'AcrPullRole')]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster'), '2024-03-02-preview').identityProfile.kubeletIdentity.objectId]",
        "principalType": "ServicePrincipal",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.ContainerRegistry/registries', format('mycontainerregistry{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionEndpoints",
      "apiVersion": "2022-06-01",
      "name": "[format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster')]",
      "location": "[resourceGroup().location]",
      "kind": "Linux",
      "properties": {
        "description": "Data Collection Endpoint for Prometheus"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
      "apiVersion": "2022-06-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', 'myakscluster')]",
      "name": "configurationAccessEndpoint",
      "properties": {
        "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[format('MSCI-{0}-{1}', resourceGroup().location, 'myakscluster')]",
      "location": "[resourceGroup().location]",
      "kind": "Linux",
      "properties": {
        "dataSources": {
          "syslog": [],
          "extensions": [
            {
              "streams": [
                "Microsoft-ContainerInsights-Group-Default"
              ],
              "extensionName": "ContainerInsights",
              "extensionSettings": {
                "dataCollectionSettings": {
                  "interval": "1m",
                  "namespaceFilteringMode": "Off",
                  "enableContainerLogV2": true
                }
              },
              "name": "ContainerInsightsExtension"
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
              "name": "ciworkspace"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [
              "Microsoft-ContainerInsights-Group-Default"
            ],
            "destinations": [
              "ciworkspace"
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('mylogs{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
      "apiVersion": "2022-06-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', 'myakscluster')]",
      "name": "[format('MSCI-{0}-{1}', resourceGroup().location, 'myakscluster')]",
      "properties": {
        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('MSCI-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Insights/dataCollectionRules', format('MSCI-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster')]",
      "location": "[resourceGroup().location]",
      "kind": "Linux",
      "properties": {
        "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]",
        "dataSources": {
          "prometheusForwarder": [
            {
              "streams": [
                "Microsoft-PrometheusMetrics"
              ],
              "name": "PrometheusDataSource"
            }
          ]
        },
        "destinations": {
          "monitoringAccounts": [
            {
              "accountResourceId": "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
              "name": "MonitoringAccount1"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [
              "Microsoft-PrometheusMetrics"
            ],
            "destinations": [
              "MonitoringAccount1"
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]",
        "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
      "apiVersion": "2022-06-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', 'myakscluster')]",
      "name": "[format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster')]",
      "properties": {
        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Insights/dataCollectionRules', format('MSProm-{0}-{1}', resourceGroup().location, 'myakscluster'))]"
      ]
    },
    {
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('KubernetesRecordingRulesRuleGroup - {0}', 'myakscluster')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabled": true,
        "description": "Kubernetes Recording Rules RuleGroup",
        "clusterName": "myakscluster",
        "scopes": [
          "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]"
        ],
        "interval": "PT1M",
        "rules": [
          {
            "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
            "expression": "sum by (cluster, namespace, pod, container) (irate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\"}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_working_set_bytes",
            "expression": "container_memory_working_set_bytes{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_rss",
            "expression": "container_memory_rss{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_cache",
            "expression": "container_memory_cache{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_swap",
            "expression": "container_memory_swap{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_requests",
            "expression": "kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"} * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_memory:kube_pod_container_resource_requests:sum",
            "expression": "sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)))"
          },
          {
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests",
            "expression": "kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"} * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_cpu:kube_pod_container_resource_requests:sum",
            "expression": "sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)))"
          },
          {
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_limits",
            "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"} * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_memory:kube_pod_container_resource_limits:sum",
            "expression": "sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)))"
          },
          {
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits",
            "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"} * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ( (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1) )"
          },
          {
            "record": "namespace_cpu:kube_pod_container_resource_limits:sum",
            "expression": "sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)))"
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) ((label_replace(label_replace(kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"}, \"replicaset\", \"$1\", \"owner_name\", \"(.*)\") * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (1, max by (replicaset, namespace, owner_name) (kube_replicaset_owner{job=\"kube-state-metrics\"})), \"workload\", \"$1\", \"owner_name\", \"(.*)\"  )))",
            "labels": {
              "workload_type": "deployment"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) ((label_replace(kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"}, \"workload\", \"$1\", \"owner_name\", \"(.*)\")))",
            "labels": {
              "workload_type": "daemonset"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) ((label_replace(kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"}, \"workload\", \"$1\", \"owner_name\", \"(.*)\")))",
            "labels": {
              "workload_type": "statefulset"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) ((label_replace(kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"Job\"}, \"workload\", \"$1\", \"owner_name\", \"(.*)\")))",
            "labels": {
              "workload_type": "job"
            }
          },
          {
            "record": ":node_memory_MemAvailable_bytes:sum",
            "expression": "sum(node_memory_MemAvailable_bytes{job=\"node\"} or (node_memory_Buffers_bytes{job=\"node\"} + node_memory_Cached_bytes{job=\"node\"} + node_memory_MemFree_bytes{job=\"node\"} + node_memory_Slab_bytes{job=\"node\"})) by (cluster)"
          },
          {
            "record": "cluster:node_cpu:ratio_rate5m",
            "expression": "sum(rate(node_cpu_seconds_total{job=\"node\",mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m])) by (cluster) /count(sum(node_cpu_seconds_total{job=\"node\"}) by (cluster, instance, cpu)) by (cluster)"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    },
    {
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('NodeRecordingRulesRuleGroup - {0}', 'myakscluster')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabled": true,
        "description": "Node Recording Rules RuleGroup",
        "clusterName": "myakscluster",
        "scopes": [
          "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]"
        ],
        "interval": "PT1M",
        "rules": [
          {
            "record": "instance:node_num_cpu:sum",
            "expression": "count without (cpu, mode) (node_cpu_seconds_total{job=\"node\",mode=\"idle\"})"
          },
          {
            "record": "instance:node_cpu_utilisation:rate5m",
            "expression": "1 - avg without (cpu) (sum without (mode) (rate(node_cpu_seconds_total{job=\"node\", mode=~\"idle|iowait|steal\"}[5m])))"
          },
          {
            "record": "instance:node_load1_per_cpu:ratio",
            "expression": "(node_load1{job=\"node\"}/  instance:node_num_cpu:sum{job=\"node\"})"
          },
          {
            "record": "instance:node_memory_utilisation:ratio",
            "expression": "1 - ((node_memory_MemAvailable_bytes{job=\"node\"} or (node_memory_Buffers_bytes{job=\"node\"} + node_memory_Cached_bytes{job=\"node\"} + node_memory_MemFree_bytes{job=\"node\"} + node_memory_Slab_bytes{job=\"node\"})) / node_memory_MemTotal_bytes{job=\"node\"})"
          },
          {
            "record": "instance:node_vmstat_pgmajfault:rate5m",
            "expression": "rate(node_vmstat_pgmajfault{job=\"node\"}[5m])"
          },
          {
            "record": "instance_device:node_disk_io_time_seconds:rate5m",
            "expression": "rate(node_disk_io_time_seconds_total{job=\"node\", device!=\"\"}[5m])"
          },
          {
            "record": "instance_device:node_disk_io_time_weighted_seconds:rate5m",
            "expression": "rate(node_disk_io_time_weighted_seconds_total{job=\"node\", device!=\"\"}[5m])"
          },
          {
            "record": "instance:node_network_receive_bytes_excluding_lo:rate5m",
            "expression": "sum without (device) (rate(node_network_receive_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_transmit_bytes_excluding_lo:rate5m",
            "expression": "sum without (device) (rate(node_network_transmit_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_receive_drop_excluding_lo:rate5m",
            "expression": "sum without (device) (rate(node_network_receive_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_transmit_drop_excluding_lo:rate5m",
            "expression": "sum without (device) (rate(node_network_transmit_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]",
        "[resourceId('Microsoft.Monitor/accounts', format('myprometheus{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
      ]
    }
  ],
  "outputs": {
    "grafanaId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Dashboard/grafana', format('mygrafana{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
    },
    "aksId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ContainerService/managedClusters', 'myakscluster')]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[format('{0}.azurecr.io', format('mycontainerregistry{0}', take(uniqueString(parameters('nameSuffix')), 4)))]"
    }
  }
}